language: rust
cache: cargo
rust:
- stable
- nightly
env:
- ARCH=x86_64_linux
- ARCH=arm_linux TARGET=arm-linux-gnueabi RUST_TARGET=arm-unknown-linux-gnueabi
- ARCH=aarch64_linux TARGET=aarch64-linux-gnu RUST_TARGET=aarch64-unknown-linux-gnu
- ARCH=arm_android TARGET=arm-linux-androideabi RUST_TARGET=armv7-linux-androideabi
  NDK_API=19 NDK_ARCH=arm
- ARCH=aarch64_android TARGET=aarch64-linux-android RUST_TARGET=aarch64-linux-android
  NDK_API=21 NDK_ARCH=arm64
- ARCH=x86_64_android TARGET=x86_64-linux-android RUST_TARGET=x86_64-linux-android
  NDK_API=21 NDK_ARCH=x86_64
- ARCH=x86_64_windows_mingw TARGET=x86_64-windows-gnu RUST_TARGET=x86_64-pc-windows-gnu
matrix:
  include:
  - os: osx
    rust: stable
    env: ARCH=x86_64_macos
  - name: cargo test
    rust: stable
    before_install:
    install:
    before_script:
    script:
    - RUST_BACKTRACE=1 cargo test
  - name: bogo test
    rust: stable
    before_install:
    install:
    before_script:
    before_deploy:
    script:
    - cd bogo && ./runme
  - name: cargo-fmt and cargo-clippy
    rust: stable
    before_install:
    install:
    before_deploy:
    before_script:
    - rustup component add rustfmt-preview
    - rustup component add clippy-preview
    script:
    - cargo fmt --all -- --check `find src -iname "*.rs"`
    - cargo clippy
  - name: coverage
    rust: stable
    before_install:
    install:
    before_deploy:
    before_script:
    script:
    - docker run --cpuset-cpus="0" --security-opt seccomp=unconfined -v "$PWD:/volume" xd009642/tarpaulin
      sh -c "cargo tarpaulin --out Xml" bash <(curl -s https://codecov.io/bash)
  allow_failures:
    - rust: nightly
  fast_finish: true
before_install:
- if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get update -qq; fi
install:
- "./ci/travis/toolchain_setup.sh"
- if [[ "$TARGET" = *"android"* ]]; then export PATH="$PATH:$PWD/cross/bin"; fi
script: "./ci/travis/build.sh"
notifications:
  email:
    on_success: never
